name: Variables 6
instructions: |-
  This level has two locks! Figure out how you can unlock them.

  As you can see from the unlock schema of the the lower lock,
  it accepts a boolean, and not a number. Can you figure out
  what to do with the key to unlock the door?

rows: 5
columns: 4

start: [0, 1, 'right']
goal:  [2, 4]

items:
  - [1, 1, 'key', {variableType: 'number'}]
  - [2, 2, 'lock', {variableType: 'number', accept: 'value => Math.pow(value, 3)'}]
  - [2, 3, 'lock', {variableType: 'number', accept: 'value => value < 6'}]

  - [0, 2, 'tree']
  - [0, 3, 'water']
  - [0, 4, 'water']
  - [0, 0, 'tree']
  - [1, 0, 'tree']
  - [1, 2, 'tree']
  - [1, 3, 'tree']
  - [1, 4, 'tree']
  - [1, 0, 'tree']
  - [2, 0, 'tree']
  - [3, 0, 'tree']
  - [3, 1, 'tree']
  - [3, 2, 'tree']
  - [3, 3, 'tree']
  - [3, 4, 'tree']

scoring:
  tests:
    pow:
      regexp: Math\.pow\s*\(
    lessThan:
      regexp: \s*<\s*

  scores:
    - score: 2
      pow: false
      message: |-
        What is the 'proper way' to calculate a cube in JavaScript?

        If you don't know, look it up on Google!

    - score: 2
      lessThan: false
      message: |-
        The lower lock accepts `true` if the value is less than 6. Do you know how to check for this
        in JavaScript?