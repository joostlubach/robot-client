rows:    8
columns: 3

start: [1, 7, 'up']
goal:  [1, 0]

items:
  - [0, 0, 'tree']
  - [0, 1, 'tree']
  - [0, 2, 'tree']
  - [0, 3, 'tree']
  - [0, 4, 'tree']
  - [0, 5, 'tree']
  - [0, 6, 'tree']
  - [0, 7, 'tree']
  - [2, 0, 'tree']
  - [2, 1, 'tree']
  - [2, 2, 'tree']
  - [2, 3, 'tree']
  - [2, 4, 'tree']
  - [2, 5, 'tree']
  - [2, 6, 'tree']
  - [2, 7, 'tree']

initialCode: |-
  // Alright, that was easy. Now Rover has lost himself in an
  // apple orchard. Of course, you can type out `move()` seven
  // times, but the point of writing code is to not repeat
  // yourself too often.
  //
  // Can you find a way using a *for loop* to get Rover to the
  // flag in only three lines of code?

scoring:
  tests:
    forLoop:
      regexp: for\s*\(.*;.*;.*\)
    short:
      maxLines: 3

  scores:
    - score: 1
      forLoop: false
      short:   false
      message: |-
        Okay, you finished, but your program is too long, and you
        haven't used a `for` loop.

        To get three stars, use a `for` loop...

    - score: 2
      forLoop: true
      short:   false
      message: |-
        Great, but try to use only three lines of code for your program...    

    - score: 2
      forLoop: false
      short:   true
      message: |-
        You haven't used a `for` loop in your code.
        
        To get three stars, use a `for` loop...